name: Bundle Size Check

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  analyze-bundle-size:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for git info

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          # Add necessary environment variables for build
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Analyze bundle size
        run: npx tsx scripts/analyze-bundle-size.ts
        env:
          CI: true
          NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
          MONITORING_API_TOKEN: ${{ secrets.MONITORING_API_TOKEN }}

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bundle-analysis
          path: .next/bundle-analysis.json
          retention-days: 30

      - name: Comment PR with bundle size
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const analysis = JSON.parse(fs.readFileSync('.next/bundle-analysis.json', 'utf8'));
            
            const formatBytes = (bytes) => {
              if (bytes === 0) return '0 B';
              const k = 1024;
              const sizes = ['B', 'KB', 'MB', 'GB'];
              const i = Math.floor(Math.log(bytes) / Math.log(k));
              return `${(bytes / Math.pow(k, i)).toFixed(2)} ${sizes[i]}`;
            };
            
            const largestBundles = analysis.largestBundles
              .slice(0, 5)
              .map(b => `- ${formatBytes(b.size)} - ${b.name}`)
              .join('\n');
            
            const comment = `## ðŸ“¦ Bundle Size Analysis
            
            **Total Size:** ${formatBytes(analysis.totalSize)}
            **Gzip Size:** ${formatBytes(analysis.totalGzipSize)} (estimated)
            **Build ID:** ${analysis.buildId}
            
            ### Top 5 Largest Bundles
            ${largestBundles}
            
            <details>
            <summary>View full analysis</summary>
            
            \`\`\`json
            ${JSON.stringify(analysis, null, 2)}
            \`\`\`
            </details>
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
