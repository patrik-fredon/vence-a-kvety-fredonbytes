name: Performance Monitoring

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run performance tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Download baseline (if exists)
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: bundle-baseline
        path: .

    - name: Run bundle analysis
      run: npm run analyze:bundle

    - name: Run bundle regression test
      run: npm run test:bundle-regression
      continue-on-error: true

    - name: Upload bundle analysis results
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis-${{ github.sha }}
        path: |
          bundle-analysis/
          bundle-regression-report.json
        retention-days: 30

    - name: Upload baseline (on main branch)
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: bundle-baseline
        path: bundle-baseline.json
        retention-days: 90

    - name: Comment PR with bundle analysis
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          try {
            const reportPath = 'bundle-regression-report.json';
            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));

              let comment = '## üìä Bundle Size Analysis\n\n';
              comment += `**Status:** ${report.status === 'pass' ? '‚úÖ Pass' : report.status === 'warning' ? '‚ö†Ô∏è Warning' : '‚ùå Fail'}\n`;
              comment += `**Total Size Change:** ${report.summary.totalSizeChange} (${report.summary.totalSizeChangePercent})\n`;

              if (report.regression.affectedChunks.length > 0) {
                comment += `\n### üì¶ Affected Chunks (${report.regression.affectedChunks.length})\n`;
                report.regression.affectedChunks.slice(0, 5).forEach(chunk => {
                  comment += `- **${chunk.name}:** +${(chunk.change / 1024).toFixed(1)}KB (${chunk.changePercent.toFixed(1)}%)\n`;
                });
              }

              if (report.regression.recommendations.length > 0) {
                comment += `\n### üí° Recommendations\n`;
                report.regression.recommendations.forEach(rec => {
                  comment += `- **${rec.type}:** ${rec.message}\n`;
                });
              }

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not create bundle analysis comment:', error.message);
          }

  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Build application
      run: npm run build

    - name: Start application
      run: |
        npm start &
        sleep 10
        curl -f http://localhost:3000 || exit 1
      env:
        NODE_ENV: production

    - name: Download performance baseline (if exists)
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: performance-baseline
        path: .

    - name: Run performance benchmarks
      run: npm run benchmark
      continue-on-error: true

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-benchmarks-${{ github.sha }}
        path: |
          performance-benchmarks/
          performance-baseline.json
        retention-days: 30

    - name: Upload baseline (on main branch)
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: performance-baseline
        path: performance-baseline.json
        retention-days: 90

    - name: Comment PR with performance results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          try {
            const resultsPath = 'performance-benchmarks/performance-benchmarks.json';
            if (fs.existsSync(resultsPath)) {
              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));

              let comment = '## üöÄ Performance Benchmark Results\n\n';
              comment += `**Overall Score:** ${results.score}/100\n`;
              comment += `**Status:** ${results.status === 'pass' ? '‚úÖ Pass' : results.status === 'warning' ? '‚ö†Ô∏è Warning' : '‚ùå Fail'}\n\n`;

              // Lighthouse scores
              comment += '### üîç Lighthouse Scores\n';
              Object.entries(results.lighthouse).forEach(([url, data]) => {
                comment += `**${url}:** Performance ${data.performance || 0}/100, Accessibility ${data.accessibility || 0}/100\n`;
              });

              // Custom metrics
              if (results.customMetrics.buildTime) {
                comment += `\n### ‚ö° Build Metrics\n`;
                comment += `- **Build Time:** ${Math.round(results.customMetrics.buildTime / 1000)}s\n`;
                if (results.customMetrics.bundleSize) {
                  comment += `- **Bundle Size:** ${(results.customMetrics.bundleSize / 1024 / 1024).toFixed(2)}MB\n`;
                }
              }

              if (results.recommendations.length > 0) {
                comment += `\n### üí° Recommendations\n`;
                results.recommendations.slice(0, 3).forEach(rec => {
                  comment += `- **${rec.type}:** ${rec.message}\n`;
                });
              }

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not create performance comment:', error.message);
          }

  lighthouse-ci:
    name: Lighthouse CI
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Start application
      run: |
        npm start &
        sleep 10
      env:
        NODE_ENV: production

    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  web-vitals-monitoring:
    name: Web Vitals Monitoring
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Build application
      run: npm run build

    - name: Start application
      run: |
        npm start &
        sleep 10
      env:
        NODE_ENV: production

    - name: Collect Web Vitals
      run: |
        npx playwright test --config=playwright-webvitals.config.ts
      continue-on-error: true

    - name: Upload Web Vitals results
      uses: actions/upload-artifact@v4
      with:
        name: web-vitals-${{ github.sha }}
        path: web-vitals-results/
        retention-days: 30

  performance-regression-check:
    name: Performance Regression Check
    runs-on: ubuntu-latest
    needs: [bundle-analysis, performance-benchmarks]
    if: always()

    steps:
    - name: Download bundle analysis
      uses: actions/download-artifact@v4
      with:
        name: bundle-analysis-${{ github.sha }}
        path: bundle-analysis/

    - name: Download performance benchmarks
      uses: actions/download-artifact@v4
      with:
        name: performance-benchmarks-${{ github.sha }}
        path: performance-benchmarks/

    - name: Check for regressions
      run: |
        echo "Checking for performance regressions..."

        # Check bundle regression
        if [ -f "bundle-regression-report.json" ]; then
          BUNDLE_STATUS=$(jq -r '.status' bundle-regression-report.json)
          echo "Bundle status: $BUNDLE_STATUS"

          if [ "$BUNDLE_STATUS" = "fail" ]; then
            echo "‚ùå Bundle size regression detected"
            exit 1
          fi
        fi

        # Check performance regression
        if [ -f "performance-benchmarks/performance-benchmarks.json" ]; then
          PERF_SCORE=$(jq -r '.score' performance-benchmarks/performance-benchmarks.json)
          echo "Performance score: $PERF_SCORE"

          if [ "$PERF_SCORE" -lt 70 ]; then
            echo "‚ùå Performance score below threshold"
            exit 1
          fi
        fi

        echo "‚úÖ No performance regressions detected"

    - name: Notify Slack on failure
      if: failure() && github.ref == 'refs/heads/main'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'üö® Performance regression detected in main branch'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
